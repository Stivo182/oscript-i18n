#Область ОписаниеПеременных

// Прочитанные пакеты ресурсов
//
// Соответствие из КлючИЗначение:
//   - Ключ - Строка - Имя пакета
//   - Значение - Объект.ПакетРесурсовЛокализации
Перем Пакеты; 

// Перечень пакетов, по которым была произведена попытка чтения
//
// Соответствие из КлючИЗначение:
//   - Ключ - Строка - Имя пакета
//   - Значение - Булево - Всегда Истина
Перем ОбработанныеИменаПакетов;

// Найденные файлы ресурсов
//
// Соответствие из КлючИЗначение:
//   - Ключ - Строка - Имя пакета
//   - Значение - Строка - Путь к файлу
Перем ФайлыРесурсов;

// Найденные файлы сценариев
//
// Соответствие из КлючИЗначение:
//   - Ключ - Строка - Имя пакета
//   - Значение - Строка - Путь к файлу
Перем ФайлыСценариев;

// Каталоги ресурсов
//
// Массив из Структура:
//   - Путь - Строка - Путь каталога
//   - РасширениеРесурсов - Строка - Расширение файлов ресурсов
//   - ИскатьВПодкаталогах - Булево - Искать в подкаталогах
//   - Просканирован - Булево - Просканирован
Перем КаталогиРесурсов;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получает пакет
// В случае отсутствия пакета выбрасывается исключение
//
// Параметры:
//   БазовоеИмя - Строка - Базовое имя пакета
//   КодЛокализации - Строка - Код локализации (ru_RU, en_US, de, nl). Если значение не указано, 
//                             то используется текущая локаль.
//
// Возвращаемое значение:
//   Объект.ПакетРесурсовЛокализации
Функция ПолучитьПакет(БазовоеИмя, Знач КодЛокализации = Неопределено) Экспорт

	КодЛокализацииПоУмолчанию = Мультиязычность.ЛокальПоУмолчанию();
	
	ПросканироватьКаталоги();
	
	Если КодЛокализации = Неопределено Тогда
		КодЛокализации = Мультиязычность.ТекущаяЛокаль();
	КонецЕсли;

	ПолноеИмяПакета = ПолноеИмяПакета(БазовоеИмя, КодЛокализации);

	Пакет = Пакеты[ПолноеИмяПакета];
	Если Не Пакет = Неопределено Тогда
		Возврат Пакет;
	КонецЕсли;

	Пакет = НайтиПакет(БазовоеИмя, КодЛокализации);
	ИскатьДальше = Пакет = Неопределено Или Не ЗначениеЗаполнено(Пакет.Локаль());

	Если ИскатьДальше
		И ЗначениеЗаполнено(КодЛокализацииПоУмолчанию)
		И КодЛокализации <> КодЛокализацииПоУмолчанию Тогда
		Пакет = ПолучитьПакет(БазовоеИмя, КодЛокализацииПоУмолчанию);
	КонецЕсли;

	Если Пакет = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			"Не найден пакет ресурсов для указанного базового имени '%1' и локали '%2'",
			БазовоеИмя,
			КодЛокализации);
	КонецЕсли;

	Возврат Пакет;

КонецФункции

// Получает пакеты
// В случае отсутствия одного из пакетов выбрасывается исключение
//
// Параметры:
//   БазовыеИмена - Строка - Перечень имен пакетов через запятую
//   КодЛокализации - Строка - Код локализации (ru_RU, en_US, de, nl). Если значение не указано, 
//                             то используется текущая локаль.
//
// Возвращаемое значение:
//   Объект.ГруппаПакетовРесурсовЛокализации
Функция ПолучитьПакеты(БазовыеИмена, Знач КодЛокализации = Неопределено) Экспорт

	МассивИмен = СтрРазделить(БазовыеИмена, ",", Ложь);

	ГруппаПакетов = Новый ГруппаПакетовРесурсовЛокализации();

	Для Каждого БазовоеИмя Из МассивИмен Цикл
		ГруппаПакетов.ДобавитьПакет(ПолучитьПакет(СокрЛП(БазовоеИмя), КодЛокализации));
	КонецЦикла;

	Возврат ГруппаПакетов;

КонецФункции

// Добавляет каталог файлов ресурсов
//
// Параметры:
//   ПутьККаталогу - Строка - Путь к каталогу относительно текущего каталога, либо абсольтный путь
//   РасширениеРесурсов - Строка - Расширение файлов ресурсов без точки (по умолчанию properties)
//   ИскатьВПодкаталогах - Булево - Искать файлы в подкаталогах (по умолчанию Истина)
Процедура ДобавитьКаталог(ПутьККаталогу, РасширениеРесурсов = "properties", ИскатьВПодкаталогах = Истина) Экспорт

	Если КаталогРесурсовУжеДобавлен(ПутьККаталогу, РасширениеРесурсов, ИскатьВПодкаталогах) Тогда
		Возврат;
	КонецЕсли;

	Описание = Новый Структура();
	Описание.Вставить("Путь", ПутьККаталогу);
	Описание.Вставить("РасширениеРесурсов", РасширениеРесурсов);
	Описание.Вставить("ИскатьВПодкаталогах", ИскатьВПодкаталогах);
	Описание.Вставить("Просканирован", Ложь);

	КаталогиРесурсов.Добавить(Описание);

КонецПроцедуры

// Очищает кэш
Процедура ОчиститьКэш() Экспорт

	Пакеты.Очистить();
	ОбработанныеИменаПакетов.Очистить();
	ФайлыРесурсов.Очистить();
	ФайлыСценариев.Очистить();

	Для Каждого ОписаниеКаталога Из КаталогиРесурсов Цикл
		ОписаниеКаталога.Просканирован = Ложь;
	КонецЦикла;

КонецПроцедуры

// Очищает все данные
Процедура ОчиститьВсе() Экспорт
	ОчиститьКэш();
	КаталогиРесурсов.Очистить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПросканироватьКаталоги()

	Для Каждого ОписаниеКаталога Из КаталогиРесурсов Цикл

		Если ОписаниеКаталога.Просканирован Тогда
			Продолжить;
		КонецЕсли;

		Каталог = Новый Файл(ОписаниеКаталога.Путь);

		// Ресурсы
		Файлы = НайтиФайлы(
			Каталог.ПолноеИмя,
			"*." + ОписаниеКаталога.РасширениеРесурсов,
			ОписаниеКаталога.ИскатьВПодкаталогах
		);

		Для Каждого Файл Из Файлы Цикл
			ПолноеИмяПакета = Файл.ИмяБезРасширения;
			ФайлыРесурсов.Вставить(ПолноеИмяПакета, Файл.ПолноеИмя);
		КонецЦикла;

		// Сценарии
		Файлы = НайтиФайлы(Каталог.ПолноеИмя, "*.os", ОписаниеКаталога.ИскатьВПодкаталогах);

		Для Каждого Файл Из Файлы Цикл
			ПолноеИмяПакета = Файл.ИмяБезРасширения;
			ФайлыСценариев.Вставить(ПолноеИмяПакета, Файл.ПолноеИмя);
		КонецЦикла;

		ОписаниеКаталога.Просканирован = Истина;

	КонецЦикла;

КонецПроцедуры

Функция НайтиПакет(БазовоеИмя, КодЛокализации)
	
	ВозможныеПакеты = ПолучитьВозможныеИменаПакетов(БазовоеИмя, КодЛокализации);

	Пакет = Неопределено;
	ПредыдущийПакет = Неопределено;
	Для Каждого ИмяПакета Из ВозможныеПакеты Цикл

		Если ПакетОбрабатывался(ИмяПакета) Тогда
			Если Пакеты[ИмяПакета] = Неопределено Тогда
				Продолжить;
			Иначе
				Пакет = Пакеты[ИмяПакета];
			КонецЕсли;
		Иначе			
			РесурсыПакета = ПолучитьРесурсыПакета(ИмяПакета);
			ОбработанныеИменаПакетов.Вставить(ИмяПакета, Истина);

			Если РесурсыПакета = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Пакет = Новый ПакетРесурсовЛокализации(БазовоеИмя, КодЛокализации);
			Пакет.УстановитьРесурсы(РесурсыПакета);

			Если Не ПредыдущийПакет = Неопределено Тогда
				Пакет.УстановитьРодителя(ПредыдущийПакет);
			КонецЕсли;

			Пакеты.Вставить(ИмяПакета, Пакет);
		КонецЕсли;
		
		ПредыдущийПакет = Пакет;

	КонецЦикла;
	
	Возврат Пакет;

КонецФункции

Функция ПолучитьРесурсыПакета(ИмяПакета)

	Ресурсы = ПолучитьРесурсыПакетаИзФайла(ИмяПакета);
	РесурсыИзКласса = ПолучитьРесурсыПакетаИзКласса(ИмяПакета);

	Если Ресурсы = Неопределено Тогда
		Возврат РесурсыИзКласса;
	ИначеЕсли Не РесурсыИзКласса = Неопределено Тогда
		СкопироватьСоответствие(РесурсыИзКласса, Ресурсы);
		Возврат Ресурсы;
	КонецЕсли;

	Возврат Ресурсы;

КонецФункции

Функция ПолучитьРесурсыПакетаИзКласса(ИмяПакета)

	Ресурсы = Неопределено;

	ПутьКСценарию = ФайлыСценариев[ИмяПакета];
	Если ПутьКСценарию = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПодключитьСценарий(ПутьКСценарию, ИмяПакета);
		
	Попытка
		ОбъектРесурсовПакета = Новый(Тип(ИмяПакета));
		Ресурсы = ОбъектРесурсовПакета.ПолучитьРесурсы();
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Если Не ТипЗнч(Ресурсы) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Ресурсы;

КонецФункции

Функция ПолучитьРесурсыПакетаИзФайла(ИмяПакета)

	ПутьКФайлу = ФайлыРесурсов[ИмяПакета];

	Если ПутьКФайлу = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЧтениеФайла = Новый ЧтениеФайлаProperties(ПутьКФайлу);
	Ресурсы = ЧтениеФайла.Прочитать();

	Возврат Ресурсы;

КонецФункции

Функция ПакетОбрабатывался(ИмяПакета)
	Возврат ОбработанныеИменаПакетов.Получить(ИмяПакета) = Истина;
КонецФункции

Функция ПолноеИмяПакета(БазовоеИмя, КодЛокализации)

	Если ЗначениеЗаполнено(КодЛокализации) Тогда
		Возврат СтрШаблон("%1_%2", БазовоеИмя, КодЛокализации);
	Иначе
		Возврат БазовоеИмя;
	КонецЕсли;

КонецФункции

Функция ПолучитьВозможныеИменаПакетов(БазовоеИмя, КодЛокализации)

	ВозможныеПакеты = Новый Массив();
	ВозможныеПакеты.Добавить(БазовоеИмя);

	СтруктураКодаЛокализации = Мультиязычность.РаспарситьКодЛокализации(КодЛокализации);

	Если Не ПустаяСтрока(СтруктураКодаЛокализации.Язык) Тогда
		ВозможныеПакеты.Добавить(СтрШаблон("%1_%2", БазовоеИмя, СтруктураКодаЛокализации.Язык));
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураКодаЛокализации.Язык) И Не ПустаяСтрока(СтруктураКодаЛокализации.Страна) Тогда
		ВозможныеПакеты.Добавить(СтрШаблон("%1_%2_%3", БазовоеИмя, СтруктураКодаЛокализации.Язык, СтруктураКодаЛокализации.Страна));
	КонецЕсли;

	Возврат ВозможныеПакеты;

КонецФункции

Функция КаталогРесурсовУжеДобавлен(ПутьККаталогу, РасширениеРесурсов, ИскатьВПодкаталогах)

	Для Каждого ОписаниеКаталога Из КаталогиРесурсов Цикл
		Если ОписаниеКаталога.Путь = ПутьККаталогу
			И ОписаниеКаталога.РасширениеРесурсов = РасширениеРесурсов
			И ОписаниеКаталога.ИскатьВПодкаталогах = ИскатьВПодкаталогах Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

Процедура СкопироватьСоответствие(СоответствиеИсточник, СоответствиеПремник)  
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеПремник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

Пакеты = Новый Соответствие();
ОбработанныеИменаПакетов = Новый Соответствие();
ФайлыРесурсов = Новый Соответствие();
ФайлыСценариев = Новый Соответствие();
КаталогиРесурсов = Новый Массив();

#КонецОбласти